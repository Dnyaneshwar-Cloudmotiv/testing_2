import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Box from '@mui/material/Box';
import Tab from '@mui/material/Tab';
import Card from '@mui/material/Card';
import TabContext from '@mui/lab/TabContext';
import { Typography } from '@mui/material';
import TabList from '@mui/lab/TabList';
import TabPanel from '@mui/lab/TabPanel';
import Avatar from '@mui/material/Avatar';
import { Amplify } from 'aws-amplify';
import awsExports from './aws-exports';
Amplify.configure(awsExports);
import './YourUploads.css';
import SideBar from './SideBar';
import coverpage from './assets/mic.jpg';



export default function YourUploads() {
    const [value, setValue] = React.useState('1');
    const [songs, setSongs] = React.useState([]);
    const [loading, setLoading] = React.useState(false);
    const [error, setError] = React.useState(null);
    const [controller, setController] = React.useState(null); // To control API requests
    const navigate = useNavigate();
    const user_id = localStorage.getItem('user_id');
    

    const handleChange = (event, newValue) => {
        setValue(newValue);
        fetchSongsByDecision(newValue);
    };

    const fetchSongsByDecision = async (tabValue) => {
        let decision = '';
        if (tabValue === '1') decision = 'Pending';
        if (tabValue === '2') decision = 'Approved';
        if (tabValue === '3') decision = 'Rejected';

        // Cancel any previous API requests
        if (controller) {
            controller.abort();
        }

        const newController = new AbortController();
        setController(newController);

        setLoading(true);
        setError(null);
        setSongs([]); // Clear the song data to prevent displaying outdated data

        try {
            console.log(user_id,decision);
            const response = await fetch(`https://ae6phpvtj3.execute-api.ap-south-1.amazonaws.com/voiz/api/approverList/decision?user_id=${user_id}&decision=${decision}`, {
                signal: newController.signal
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const data = await response.json();
            console.log(data);
              // Check if the response is a string indicating no songs available
        if (typeof data === 'string') {
            console.log('Response is a string:', data);
            setSongs([]); // Set songs to an empty array
        } else if (Array.isArray(data)) {
            // If the response is an array, process it
            const formattedSongs = data.map(song => ({
                ...song,
                coverPageUrl: song.coverPageUrl?.S ? `${song.coverPageUrl.S}?t=${new Date().getTime()}` : null,
            }));
            setSongs(formattedSongs);
        } else {
            // If the response is neither a string nor an array, handle it as an error
            throw new Error('Unexpected response format');
        }
        } catch (error) {
            if (error.name === 'AbortError') {
                console.log('Fetch request was cancelled.');
            } else {
                setError(error.message || 'Failed to fetch data.');
            }
        } finally {
            setLoading(false);
        }
    };

    const handleSongClick = (song) => {
    };
  

    React.useEffect(() => {
        fetchSongsByDecision('1');
    }, []);

    return (
        <Box className="admin-page" >
             <SideBar/>
             <Box className='admin-body'>
             <Card className="admin-card" sx={{ backgroundColor: '#465473', boxShadow: 'none', border: 'none' }}>
                <Box>
                <Typography variant='h4' sx={{color:"white",marginBottom:3}}>Your Uploads</Typography>
             </Box>
                    <TabContext value={value}>
                        <Box className="tab-list-container" >
                            <TabList onChange={handleChange} className="admin-tablist">
                                <Tab label="Pending Songs" value="1" sx={{ textTransform: 'none' }} className={`tab-item ${value === '1' ? 'active' : ''}`} />
                                <Tab label="Approved Songs" value="2" sx={{ textTransform: 'none' }} className={`tab-item ${value === '2' ? 'active' : ''}`} />
                                <Tab label="Rejected Songs" value="3" sx={{ textTransform: 'none' }} className={`tab-item ${value === '3' ? 'active' : ''}`} />
                            </TabList>

                        </Box>

                        {value === '1' && (
                            <TabPanel value="1" className="song-list-panel">
                                {loading ? (
                                    <p>Loading...</p>
                                ) : error ? (
                                    <p className="error-message">Error: {error}</p>
                                ) : songs.length > 0 ? (
                                    <Box className="songlistgrid">
                                        {songs.map((song, index) => (
                                            <Box key={index} className="song-item" onClick={() => handleSongClick(song)}>
                                                {song.coverPageUrl ? (
                                                    <img
                                                        src={song.coverPageUrl}
                                                        alt={song.songName}
                                                        className="songcover"
                                                    />
                                                ) : (
                                                    // <Avatar
                                                    //     alt={song.songName}
                                                    //     variant="square"
                                                    //     sx={{ width: 100, height: 100 }}
                                                    //     className='songcover'
                                                    // >
                                                    // </Avatar>
                                                    <img
                                                    src={coverpage}
                                                    alt={song.songName}
                                                    className="songcover"
                                                />
                                                )}
                                                <Box sx={{ flexGrow: 1 }}>
                                                    <Typography variant="body1" sx={{ fontSize: '20px' }}>{song.songName}</Typography>
                                                    <Typography variant="body2" sx={{ marginTop: '5px', fontSize: '18px', color: '#A5A5A5' }}>{song.stage_name}</Typography>
                                                </Box>
                                                <Box>
                                                    <Typography variant="body2" sx={{ marginLeft: '15px', alignSelf: 'flex-start', marginTop: '3px' }}>{song.span}</Typography>
                                                </Box>
                                            </Box>
                                        ))}
                                    </Box>
                                ) : (
                                    <p>No pending songs available</p>
                                )}
                            </TabPanel>
                        )}

                        {value === '2' && (
                            <TabPanel value="2" className="song-list-panel">
                                {loading ? (
                                    <p>Loading...</p>
                                ) : error ? (
                                    <p className="error-message">Error: {error}</p>
                                ) : songs.length > 0 ? (
                                    <Box className="songlistgrid">
                                        {songs.map((song, index) => (
                                            <Box key={index} className="song-item" onClick={() => handleSongClick(song)}>
                                                {song.coverPageUrl ? (
                                                    <img
                                                        src={song.coverPageUrl}
                                                        alt={song.songName}
                                                        className="songcover"
                                                    />
                                                ) : (
                                                    // <Avatar
                                                    //     alt={song.songName}
                                                    //     variant="square"
                                                    //     sx={{ width: 100, height: 100 }}
                                                    //     className='songcover'
                                                    // >
                                                    // </Avatar>
                                                    <img
                                                    src={coverpage}
                                                    alt={song.songName}
                                                    className="songcover"
                                                />
                                                )}
                                                <Box sx={{ flexGrow: 1 }}>
                                                    <Typography variant="body1" sx={{ fontSize: '20px' }}>{song.songName}</Typography>
                                                    <Typography variant="body2" sx={{ marginTop: '5px', fontSize: '18px', color: '#A5A5A5' }}>{song.stage_name}</Typography>
                                                </Box>
                                                <Box>
                                                    <Typography variant="body2" sx={{ marginLeft: '15px', alignSelf: 'flex-start', marginTop: '3px' }}>{song.span}</Typography>
                                                </Box>
                                            </Box>
                                        ))}
                                    </Box>
                                ) : (
                                    <p>No approved songs available</p>
                                )}
                            </TabPanel>
                        )}

                        {value === '3' && (
                            <TabPanel value="3" className="song-list-panel">
                                {loading ? (
                                    <p>Loading...</p>
                                ) : error ? (
                                    <p className="error-message">Error: {error}</p>
                                ) : songs.length > 0 ? (
                                    <Box className="songlistgrid">
                                        {songs.map((song, index) => (
                                            <Box key={index} className="song-item" onClick={() => handleSongClick(song)}>
                                                {song.coverPageUrl ? (
                                                    <img
                                                        src={song.coverPageUrl}
                                                        alt={song.songName}
                                                        className="songcover"
                                                    />
                                                ) : (
                                                    // <Avatar
                                                    //     alt={song.songName}
                                                    //     variant="square"
                                                    //     sx={{ width: 100, height: 100 }}
                                                    //     className='songcover'
                                                    // >
                                                    // </Avatar>
                                                    <img
                                                    src={coverpage}
                                                    alt={song.songName}
                                                    className="songcover"
                                                />
                                                )}
                                                <Box sx={{ flexGrow: 1 }}>
                                                    <Typography variant="body1" sx={{ fontSize: '20px' }}>{song.songName}</Typography>
                                                    <Typography variant="body2" sx={{ marginTop: '5px', fontSize: '18px', color: '#A5A5A5' }}>{song.stage_name}</Typography>
                                                </Box>
                                                <Box>
                                                    <Typography variant="body2" sx={{ marginLeft: '15px', alignSelf: 'flex-start', marginTop: '3px' }}>{song.span}</Typography>
                                                </Box>
                                            </Box>
                                        ))}
                                    </Box>
                                ) : (
                                    <p>No rejected songs available</p>
                                )}
                            </TabPanel>
                        )}
                    </TabContext>
                </Card>
             </Box>
        </Box>
    );
}


your uploads without tablist
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import Button from '@mui/material/Button';
import SideBar from './SideBar';
import coverpage from './assets/mic.jpg';
import { Amplify } from 'aws-amplify';
import awsExports from './aws-exports';
import './YourUploads.css';

Amplify.configure(awsExports);

export default function YourUploads() {
    const [songs, setSongs] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [selectedSong, setSelectedSong] = useState(null); // State for selected song
    const navigate = useNavigate();
    const user_id = localStorage.getItem('user_id');

    const fetchSongs = async () => {
        const newController = new AbortController();
        setLoading(true);
        setError(null);
        setSongs([]);

        try {
            const response = await fetch(`https://ae6phpvtj3.execute-api.ap-south-1.amazonaws.com/voiz/api/approverList?user_id=${user_id}`, {
                signal: newController.signal
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const data = await response.json();

            if (typeof data === 'string') {
                setSongs([]);
            } else if (Array.isArray(data)) {
                const formattedSongs = data.map(song => ({
                    ...song,
                    coverPageUrl: song.coverPageUrl ? `${song.coverPageUrl}?t=${new Date().getTime()}` : null,
                }));
                setSongs(formattedSongs);
            } else {
                throw new Error('Unexpected response format');
            }
        } catch (error) {
            if (error.name !== 'AbortError') {
                setError(error.message || 'Failed to fetch data.');
            }
        } finally {
            setLoading(false);
        }
    };

    const handleSongClick = (song) => {
        setSelectedSong(song);
    };

    useEffect(() => {
        fetchSongs();
    }, []);

    return (
        <Box className="adminPage">
            <SideBar />
            <Box className="adminBody">
                <Typography variant='h3' sx={{ color: "white", marginBottom: 2, marginTop: 5 }}>Your Uploads</Typography>

                <Box className="ListPanel">
                    {loading ? (
                        <p>Loading...</p>
                    ) : error ? (
                        <p className="error-message">Error: {error}</p>
                    ) : songs.length > 0 ? (
                        <Box className="songListGrid">
                            {songs.map((song, index) => (
                                <Box
                                    key={index}
                                    className="song-item"
                                    onClick={() => handleSongClick(song)}
                                    sx={{ cursor: 'pointer' }}
                                >
                                    <img
                                        src={song.coverPageUrl || coverpage}
                                        alt={song.songName}
                                        className="songcover"
                                    />
                                    <Box sx={{ flexGrow: 1 }}>
                                        <Typography variant="body1" sx={{ fontSize: '20px', color: "white" }}>
                                            {song.songName}
                                        </Typography>
                                        <Typography
                                            variant="body2"
                                            sx={{ marginTop: '5px', fontSize: '18px', color: '#A5A5A5' }}
                                        >
                                            {song.stage_name}
                                        </Typography>
                                    </Box>
                                    <Box>
                                        <Button
                                            sx={{
                                                backgroundColor: song.decision === 'Rejected' ? '#F61111CC' 
                                                : song.decision === 'Approved' ? 'green' 
                                                : song.decision === 'Pending' ? '#0057FFCC' 
                                                : 'gray',
                                                color: 'white',
                                                marginLeft: '15px',
                                                alignSelf: 'flex-start',
                                                marginTop: '3px',
                                                width: '120%',
                                                textTransform: 'none',
                                                fontSize: '16px',
                                                borderRadius: '20px'
                                            }}
                                        >
                                            {song.decision}
                                        </Button>
                                    </Box>
                                </Box>
                            ))}
                        </Box>
                    ) : (
                        <p>No Uploads</p>
                    )}
                </Box>
                   
            {/* Fixed Details Box at the Bottom */}
            {selectedSong && (
                <Box
                    sx={{
                        position: 'fixed',
                        bottom: 10,
                        width:'60%',
                        backgroundColor: '#2E3B55',
                        padding: 3,
                        color: 'white',
                        borderRadius: 2
                    }}
                >
                    <Typography variant="h5" sx={{ fontWeight: 'bold' }}>{selectedSong.songName}</Typography>
                    <Typography variant="body1" sx={{ marginBottom: 2 }}>
                        {selectedSong.stage_name}
                    </Typography>

                    {selectedSong.decision === 'Rejected' && (
                        <>
                            <Typography variant="body1" sx={{ color: 'red', fontWeight: 'bold' }}>Rejected</Typography>
                            <Typography variant="body2" sx={{ marginTop: 1 }}>Reason for Rejection: Explicit Content</Typography>
                            <Typography variant="body2" sx={{ marginTop: 1 }}>How you can improve: Try altering the lyrics for all age groups.</Typography>
                            <Typography variant="body2" sx={{ marginTop: 1 }}>Contact Support: singers@voiz.co.in</Typography>
                        </>
                    )}
                    {selectedSong.decision === 'Approved' && (
                        <>
                            <Typography variant="body1" sx={{ color: 'green', fontWeight: 'bold' }}>Approved</Typography>
                            <Typography variant="body2" sx={{ marginTop: 1 }}>This song is approved and live on the platform.</Typography>
                        </>
                    )}
                    {selectedSong.decision === 'Pending' && (
                        <>
                            <Typography variant="body1" sx={{ color: '#0057FF', fontWeight: 'bold' }}>Pending</Typography>
                            <Typography variant="body2" sx={{ marginTop: 1 }}>Your song is pending approval. You will be notified once it is reviewed.</Typography>
                        </>
                    )}
                </Box>
            )}
            </Box>
        </Box>
    );
}





          {/* 
    
          {!['lovedTracks', 'history'].includes(pageInfo.type) && (
            <>
            
              {relatedPlaylists.length > 0 && (
                <Box className="related-section">
                  <Typography variant="h6" sx={{ color: 'white', mb: 2, mt: 4 }}>
                    Related Playlists
                  </Typography>
                  <Grid container spacing={2}>
                    {relatedPlaylists.map((playlist, index) => (
                      <Grid item xs={12} sm={6} md={4} lg={2} key={index}>
                        <ContentCard
                          title={playlist.name}
                          subtitle={`${playlist.songCount} songs`}
                          image={playlist.coverImage}
                          onClick={() => navigate('/playlist', { state: { playlist } })}
                        />
                      </Grid>
                    ))}
                  </Grid>
                </Box>
              )} */}

          {/* 
          
              {pageInfo.type === 'language' && similarLanguages.length > 0 && (
                <Box className="related-section">
                  <Typography variant="h6" sx={{ color: 'white', mb: 2, mt: 4 }}>
                    More Languages
                  </Typography>
                  <Grid container spacing={2}>
                    {similarLanguages.map((lang, index) => (
                      <Grid item xs={12} sm={6} md={4} lg={2} key={index}>
                        <ContentCard
                          title={lang}
                          subtitle="Explore more"
                          image={`/assets/${lang}.jpg`}
                          onClick={() => navigate('/language', { state: { language: lang } })}
                        />
                      </Grid>
                    ))}
                  </Grid>
                </Box>
              )}
            </>
          )}
           */}
















HomePage.js
// HomePage.jsx
import React, { useState, useEffect, useRef } from 'react';
import { Box, Card, Typography, IconButton } from '@mui/material';
import ChevronLeftIcon from '@mui/icons-material/ChevronLeft';
import ChevronRightIcon from '@mui/icons-material/ChevronRight';
import EastIcon from '@mui/icons-material/East';
import WestIcon from '@mui/icons-material/West';
import { useNavigate } from 'react-router-dom';
import './HomePage.css';
import coverpage from './assets/coverpage1.jpeg';
import genreImage1 from './assets/Bhakti.jpg';
import genreImage2 from './assets/Classical.avif';
import genreImage3 from './assets/Kids.png';
import genreImage4 from './assets/Pop.avif';
import genreImage5 from './assets/Rock.webp';
import genreImage6 from './assets/Romantic.jpg';
import languageImage1 from './assets/Bengali.jpeg';
import languageImage2 from './assets/English.jpg';
import languageImage3 from './assets/Gujarati.jpeg';
import languageImage4 from './assets/Hindi.jpeg';
import languageImage5 from './assets/Malayalam.jpeg';
import languageImage6 from './assets/Marathi.jpeg';
import SideBar from './SideBar';

export default function HomePage() {
  const navigate = useNavigate();
  const [artists, setArtists] = useState([]);
  const [genreSongs, setGenreSongs] = useState({});
  const [isLanguagesScrollable, setIsLanguagesScrollable] = useState(false);
  const [isGenresScrollable, setIsGenresScrollable] = useState(false);
  const [isArtistsScrollable, setIsArtistsScrollable] = useState(false);
  const scrollRefLanguages = useRef(null);
  const scrollRefGenres = useRef(null);
  const scrollRefArtists = useRef(null);
  console.log(artists);

  const genres = ['Bhakti', 'Classical', 'Kids', 'Pop', 'Rock', 'Romantic'];
  const languages = ['Bengali', 'English', 'Gujarati', 'Hindi', 'Malayalam', 'Marathi'];

  const languageImages = {
    Bengali: languageImage1,
    English: languageImage2,
    Gujarati: languageImage3,
    Hindi: languageImage4,
    Malayalam: languageImage5,
    Marathi: languageImage6,
  };

  const genreImages = {
    Bhakti: genreImage1,
    Classical: genreImage2,
    Kids: genreImage3,
    Pop: genreImage4,
    Rock: genreImage5,
    Romantic: genreImage6,
  };

  // Fetch artists data
  useEffect(() => {
    const fetchArtists = async () => {
      try {
        const response = await fetch('https://ae6phpvtj3.execute-api.ap-south-1.amazonaws.com/voiz/api/artist');
        const data = await response.json();
        setArtists(data);
      } catch (error) {
        console.error('Error fetching artists:', error);
      }
    };
    fetchArtists();
  }, []);

  // Fetch genre songs
  useEffect(() => {
    const fetchGenreSongs = async () => {
      try {
        const genrePromises = genres.map(async (genre) => {
          const response = await fetch(`https://ae6phpvtj3.execute-api.ap-south-1.amazonaws.com/voiz/api/genre?genre=${genre}`);
          if (!response.ok) throw new Error(`Failed to fetch ${genre} songs`);
          const data = await response.json();
          return { genre, songs: data };
        });

        const genreResults = await Promise.all(genrePromises);
        const genreSongsMap = {};
        genreResults.forEach(({ genre, songs }) => {
          genreSongsMap[genre] = songs;
        });
        setGenreSongs(genreSongsMap);
      } catch (error) {
        console.error('Error fetching genre songs:', error);
      }
    };

    fetchGenreSongs();
  }, []);

  // Scroll handling effects
  useEffect(() => {
    if (scrollRefLanguages.current) {
      setIsLanguagesScrollable(scrollRefLanguages.current.scrollWidth > scrollRefLanguages.current.clientWidth);
    }
  }, [languages]);

  useEffect(() => {
    if (scrollRefGenres.current) {
      setIsGenresScrollable(scrollRefGenres.current.scrollWidth > scrollRefGenres.current.clientWidth);
    }
  }, [genres]);

  useEffect(() => {
    if (scrollRefArtists.current) {
      setIsArtistsScrollable(scrollRefArtists.current.scrollWidth > scrollRefArtists.current.clientWidth);
    }
  }, [artists]);

  // Navigation handlers
  const handleLanguageSelect = (language) => {
    navigate('/language', { state: { language } });
  };

  const handleGenreSelect = (genre) => {
    const genreSongList = genreSongs[genre] || [];
    navigate('/genre', { 
      state: { 
        genre,
        songs: genreSongList
      } 
    });
  };

  const handleArtistSelect = (artist) => {
    navigate('/artist', { state: { artist} });
  };
  

  // Scroll handlers
  const scrollLeftArtists = () => {
    if (scrollRefArtists.current) {
      scrollRefArtists.current.scrollBy({ left: -300, behavior: 'smooth' });
    }
  };

  const scrollRightArtists = () => {
    if (scrollRefArtists.current) {
      scrollRefArtists.current.scrollBy({ left: 300, behavior: 'smooth' });
    }
  };

  const scrollLeftLanguages = () => {
    if (scrollRefLanguages.current) {
      scrollRefLanguages.current.scrollBy({ left: -300, behavior: 'smooth' });
    }
  };

  const scrollRightLanguages = () => {
    if (scrollRefLanguages.current) {
      scrollRefLanguages.current.scrollBy({ left: 300, behavior: 'smooth' });
    }
  };

  const scrollLeftGenres = () => {
    if (scrollRefGenres.current) {
      scrollRefGenres.current.scrollBy({ left: -300, behavior: 'smooth' });
    }
  };

  const scrollRightGenres = () => {
    if (scrollRefGenres.current) {
      scrollRefGenres.current.scrollBy({ left: 300, behavior: 'smooth' });
    }
  };

  return (
    <Box className="drawer">
      <SideBar />
      <Box sx={{ flexGrow: 1, minWidth: 100 }}>
        {/* Latest Music Section */}
        <Box sx={{ padding: 4 }}>
          <Box display="flex" alignItems="center" justifyContent="space-between" sx={{ marginBottom: 2 }}>
            <Typography variant="h5" sx={{ color: 'white' }} gutterBottom>
              Latest Music
            </Typography>
            {isArtistsScrollable && (
              <Box>
                <IconButton onClick={scrollLeftArtists} sx={{ backgroundColor: 'rgba(0, 0, 0, 0.5)', color: 'white', '&:hover': { backgroundColor: 'rgba(0, 0, 0, 0.7)' }, marginRight: 1 }}>
                  <ChevronLeftIcon />
                </IconButton>
                <IconButton onClick={scrollRightArtists} sx={{ backgroundColor: 'rgba(0, 0, 0, 0.5)', color: 'white', '&:hover': { backgroundColor: 'rgba(0, 0, 0, 0.7)' } }}>
                  <ChevronRightIcon />
                </IconButton>
              </Box>
            )}
          </Box>

          <Box ref={scrollRefArtists} display="flex" overflow="hidden" whiteSpace="nowrap" gap={3} sx={{ overflowX: 'hidden', paddingBottom: 1, scrollBehavior: 'smooth' }}>
            {artists.map((artist, index) => (
              <Box 
                key={index} 
                sx={{ width: '140px', cursor: 'pointer' }}
                onClick={() => handleArtistSelect(artist)}
              >
                <Card sx={{ bgcolor: '#1C2C46', color: 'white', marginBottom: 1 }}>
                  <img
                    src={artist.profilePhotoUrl.S || coverpage}
                    style={{ width: '140px', height: '140px', borderRadius: '8px' }}
                    alt={artist.FullName.S}
                  />
                </Card>
                <Typography variant="h6" sx={{ color: 'white', textWrap: 'balance' }}>{artist.FullName.S}</Typography>
              </Box>
            ))}
          </Box>
        </Box>

        {/* Languages Section */}
        <Box sx={{ padding: 4 }}>
          <Box display="flex" alignItems="center" justifyContent="space-between" sx={{ marginBottom: 2 }}>
            <Typography variant="h5" sx={{ color: 'white' }} gutterBottom>
              For you from India
            </Typography>
            {isLanguagesScrollable && (
              <Box>
                <IconButton onClick={scrollLeftLanguages} sx={{ backgroundColor: 'rgba(0, 0, 0, 0.5)', color: 'white', '&:hover': { backgroundColor: 'rgba(0, 0, 0, 0.7)' }, marginRight: 1 }}>
                  <ChevronLeftIcon />
                </IconButton>
                <IconButton onClick={scrollRightLanguages} sx={{ backgroundColor: 'rgba(0, 0, 0, 0.5)', color: 'white', '&:hover': { backgroundColor: 'rgba(0, 0, 0, 0.7)' } }}>
                  <ChevronRightIcon />
                </IconButton>
              </Box>
            )}
          </Box>

          <Box ref={scrollRefLanguages} display="flex" overflow="hidden" whiteSpace="nowrap" gap={3} sx={{ overflowX: 'hidden', paddingBottom: 1, scrollBehavior: 'smooth' }}>
            {languages.map((language, index) => (
              <Box 
                key={index} 
                sx={{ width: '140px', cursor: 'pointer', position: 'relative' }}
                onClick={() => handleLanguageSelect(language)}
              >
                <Card sx={{ bgcolor: '#1C2C46', color: 'white', marginBottom: 1 }}>
                  <img
                    src={languageImages[language] || coverpage}
                    style={{ width: '140px', height: '140px', borderRadius: '8px' }}
                    alt={language}
                  />
                </Card>
                <Typography variant="h6" sx={{ color: 'white' }}>{language}</Typography>
              </Box>
            ))}
          </Box>
        </Box>

        {/* Genres Section */}
        <Box sx={{ padding: 4 }}>
          <Box display="flex" alignItems="center" justifyContent="space-between" sx={{ marginBottom: 2 }}>
            <Typography variant="h5" sx={{ color: 'white' }} gutterBottom>
              Genre
            </Typography>
            {isGenresScrollable && (
              <Box>
                <IconButton onClick={scrollLeftGenres} sx={{ backgroundColor: 'rgba(0, 0, 0, 0.5)', color: 'white', '&:hover': { backgroundColor: 'rgba(0, 0, 0, 0.7)' }, marginRight: 1 }}>
                  <ChevronLeftIcon />
                </IconButton>
                <IconButton onClick={scrollRightGenres} sx={{ backgroundColor: 'rgba(0, 0, 0, 0.5)', color: 'white', '&:hover': { backgroundColor: 'rgba(0, 0, 0, 0.7)' } }}>
                  <ChevronRightIcon />
                </IconButton>
              </Box>
            )}
          </Box>

          <Box ref={scrollRefGenres} display="flex" overflow="hidden" whiteSpace="nowrap" gap={3} sx={{ overflowX: 'hidden', paddingBottom: 1, scrollBehavior: 'smooth' }}>
            {genres.map((genre, index) => (
              <Box 
                key={index} 
                sx={{ width: '140px', cursor: 'pointer', position: 'relative' }}
                onClick={() => handleGenreSelect(genre)}
              >
                <Card sx={{ bgcolor: '#1C2C46', color: 'white', marginBottom: 1, position: 'relative' }}>
                  <img
                    src={genreImages[genre] || coverpage}
                    style={{ width: '140px', height: '140px', borderRadius: '8px' }}
                    alt={genre}
                  />
                  {genreSongs[genre] && (
                    <Box sx={{ 
                      position: 'absolute', 
                      bottom: 8, 
                      left: 8, 
                      right: 8, 
                      color: 'white',
                      fontSize: '0.75rem',
                      textShadow: '1px 1px 2px rgba(0,0,0,0.8)',
                      background: 'linear-gradient(180deg, transparent, rgba(0,0,0,0.7))',
                      padding: '4px 8px',
                      borderRadius: '0 0 8px 8px'
                    }}>
                      {genreSongs[genre].length} songs
                    </Box>
                  )}
                </Card>
                <Typography variant="h6" sx={{ color: 'white' }}>{genre}</Typography>
              </Box>
            ))}
          </Box>
        </Box>
      </Box>
    </Box>
  );
}





forgot dialog box
{/* Forgot Password Dialog */}
      <Dialog
        fullWidth
        open={openForgotPassword}
        onClose={handleCloseForgotPassword}
        aria-labelledby="forgot-password-dialog-title"
        aria-describedby="forgot-password-dialog-description"
      
      >
        <DialogTitle id="forgot-password-dialog-title">Reset Password</DialogTitle>
        <DialogContent id="forgot-password-dialog-description">

          {forgotPasswordStep === 1 && (
            <TextField
              autoFocus
              margin="dense"
              label="Email Address"
              type="email"
              fullWidth
              variant="outlined"
              value={forgotEmail}
              onChange={(e) => setForgotEmail(e.target.value)}
              error={Boolean(emailError)}
              helperText={emailError}
            
            />
          )}
          {forgotSuccess && (
            <Typography variant="body2" color="success.main" sx={{ marginBottom: 2 }}>
              {forgotSuccess}
            </Typography>
          )}
          {forgotError && (
            <Typography variant="body2" color="error" sx={{ marginBottom: 2 }}>
              {forgotError}
            </Typography>
          )}
          {forgotPasswordStep === 2 && (
            <>
              <TextField
                autoFocus
                margin="dense"
                label="Verification Code"
                type="text"
                fullWidth
                variant="outlined"
                value={confirmationCode}
                onChange={(e) => setConfirmationCode(e.target.value)}
              />
              {/* Resend Confirmation Code Button with Timer */}
              <Box sx={{ display: 'flex', alignItems: 'right', marginTop: 2 }}>
                <Button
                  variant="text"
                  onClick={handleResendCode}
                  disabled={isResendDisabled}
                  sx={{ textTransform: 'none' }}
                >
                  {isResendDisabled ? `Resend in ${timer}s` : 'Resend Confirmation Code'}
                </Button>
              </Box>
              <TextField
                margin="dense"
                label="New Password"
                type="password"
                fullWidth
                variant="outlined"
                value={newPassword}
                onChange={handleNewPasswordChange}
                inputProps={{ minLength: 8, maxLength: 16 }}
                error={Boolean(passwordError)}
                helperText={passwordError}
                sx={{ marginTop: 2 }}
              />
              <TextField
                margin="dense"
                label="Confirm New Password"
                type="password"
                fullWidth
                variant="outlined"
                value={confirmNewPassword}
                onChange={handleConfirmNewPasswordChange}
                inputProps={{ minLength: 8, maxLength: 16 }}
                error={Boolean(confirmPasswordError)}
                helperText={confirmPasswordError}
                sx={{ marginTop: 2 }}
              />

            </>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseForgotPassword}>Cancel</Button>
          {forgotPasswordStep === 1 && (
            <Button onClick={handleRequestPasswordReset} variant="contained" color="primary">
              Send Code
            </Button>
          )}
          {forgotPasswordStep === 2 && (
            <Button
              onClick={handleSubmitNewPassword}
              variant="contained"
              color="primary"
              disabled={
                !confirmationCode ||
                !newPassword ||
                !confirmNewPassword ||
                newPassword !== confirmNewPassword ||
                passwordError !== '' ||
                confirmPasswordError !== ''
              }
            >
              Reset Password
            </Button>
          )}
        </DialogActions>
      </Dialog>